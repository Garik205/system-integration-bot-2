"""–ú–æ–¥—É–ª—å —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫—É—Ä—Å–æ–≤ —Ç–æ–ø-5 —Ü–µ–Ω–Ω—ã—Ö –±—É–º–∞–≥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Finnhub API."""

import json
import requests
from requests.exceptions import RequestException
from telebot.types import Message
from bot_func_abc import AtomicBotFunctionABC

class StockRateFunction(AtomicBotFunctionABC):
    commands = ["stockrate"]
    authors = ["Igor"]
    about = "–í—ã–≤–æ–¥ –∫—É—Ä—Å–æ–≤ —Ç–æ–ø-5 —Ü–µ–Ω–Ω—ã—Ö –±—É–º–∞–≥"
    description = "–ö–æ–º–∞–Ω–¥–∞ /stockrate –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –¥–ª—è —Ç–æ–ø-5 —Ü–µ–Ω–Ω—ã—Ö –±—É–º–∞–≥."
    state = True

    def set_handlers(self, bot):

        @bot.message_handler(commands=self.commands)
        def handle_stockrate(message: Message):
            try:
                api_key = "d0picahr01qgccu9ahlgd0picahr01qgccu9ahm0"
                symbols = ['AAPL', 'GOOGL', 'AMZN', 'MSFT', 'TSLA']
                stock_info = {
                    'AAPL': 'Apple Inc.',
                    'GOOGL': 'Alphabet Inc.',
                    'AMZN': 'Amazon.com Inc.',
                    'MSFT': 'Microsoft Corp.',
                    'TSLA': 'Tesla Inc.'
                }

                message_text = "üìà –ö—É—Ä—Å—ã —Ç–æ–ø-5 —Ü–µ–Ω–Ω—ã—Ö –±—É–º–∞–≥:\n\n"
                for symbol in symbols:
                    response = requests.get(
                        f"https://finnhub.io/api/v1/quote?symbol={symbol}&token={api_key}",timeout=5
                    )
                    response.raise_for_status()
                    data = response.json()
                    current_price = data.get('c', 'N/A')
                    description = stock_info.get(symbol, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ü–µ–Ω–Ω–∞—è –±—É–º–∞–≥–∞')
                    message_text += f"{symbol} ({description}): {current_price}\n"

                bot.send_message(message.chat.id, message_text)

            except (RequestException, json.JSONDecodeError) as e:
                bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                